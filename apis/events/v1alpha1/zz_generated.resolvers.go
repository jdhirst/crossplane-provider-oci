/*
Copyright 2022 Upbound Inc.
*/
// Code generated by angryjet. DO NOT EDIT.

package v1alpha1

import (
	"context"
	reference "github.com/crossplane/crossplane-runtime/pkg/reference"
	v1alpha1 "github.com/oracle/provider-oci/apis/functions/v1alpha1"
	v1alpha13 "github.com/oracle/provider-oci/apis/identity/v1alpha1"
	v1alpha12 "github.com/oracle/provider-oci/apis/ons/v1alpha1"
	v1alpha11 "github.com/oracle/provider-oci/apis/streaming/v1alpha1"
	errors "github.com/pkg/errors"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

// ResolveReferences of this Rule.
func (mg *Rule) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	for i3 := 0; i3 < len(mg.Spec.ForProvider.Actions); i3++ {
		for i4 := 0; i4 < len(mg.Spec.ForProvider.Actions[i3].Actions); i4++ {
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Actions[i3].Actions[i4].FunctionID),
				Extract:      reference.ExternalName(),
				Reference:    mg.Spec.ForProvider.Actions[i3].Actions[i4].FunctionIDRef,
				Selector:     mg.Spec.ForProvider.Actions[i3].Actions[i4].FunctionIDSelector,
				To: reference.To{
					List:    &v1alpha1.FunctionList{},
					Managed: &v1alpha1.Function{},
				},
			})
			if err != nil {
				return errors.Wrap(err, "mg.Spec.ForProvider.Actions[i3].Actions[i4].FunctionID")
			}
			mg.Spec.ForProvider.Actions[i3].Actions[i4].FunctionID = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.ForProvider.Actions[i3].Actions[i4].FunctionIDRef = rsp.ResolvedReference

		}
	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.Actions); i3++ {
		for i4 := 0; i4 < len(mg.Spec.ForProvider.Actions[i3].Actions); i4++ {
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Actions[i3].Actions[i4].StreamID),
				Extract:      reference.ExternalName(),
				Reference:    mg.Spec.ForProvider.Actions[i3].Actions[i4].StreamIDRef,
				Selector:     mg.Spec.ForProvider.Actions[i3].Actions[i4].StreamIDSelector,
				To: reference.To{
					List:    &v1alpha11.StreamList{},
					Managed: &v1alpha11.Stream{},
				},
			})
			if err != nil {
				return errors.Wrap(err, "mg.Spec.ForProvider.Actions[i3].Actions[i4].StreamID")
			}
			mg.Spec.ForProvider.Actions[i3].Actions[i4].StreamID = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.ForProvider.Actions[i3].Actions[i4].StreamIDRef = rsp.ResolvedReference

		}
	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.Actions); i3++ {
		for i4 := 0; i4 < len(mg.Spec.ForProvider.Actions[i3].Actions); i4++ {
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Actions[i3].Actions[i4].TopicID),
				Extract:      reference.ExternalName(),
				Reference:    mg.Spec.ForProvider.Actions[i3].Actions[i4].TopicIDRef,
				Selector:     mg.Spec.ForProvider.Actions[i3].Actions[i4].TopicIDSelector,
				To: reference.To{
					List:    &v1alpha12.NotificationTopicList{},
					Managed: &v1alpha12.NotificationTopic{},
				},
			})
			if err != nil {
				return errors.Wrap(err, "mg.Spec.ForProvider.Actions[i3].Actions[i4].TopicID")
			}
			mg.Spec.ForProvider.Actions[i3].Actions[i4].TopicID = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.ForProvider.Actions[i3].Actions[i4].TopicIDRef = rsp.ResolvedReference

		}
	}
	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.CompartmentID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.CompartmentIDRef,
		Selector:     mg.Spec.ForProvider.CompartmentIDSelector,
		To: reference.To{
			List:    &v1alpha13.CompartmentList{},
			Managed: &v1alpha13.Compartment{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.CompartmentID")
	}
	mg.Spec.ForProvider.CompartmentID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.CompartmentIDRef = rsp.ResolvedReference

	for i3 := 0; i3 < len(mg.Spec.InitProvider.Actions); i3++ {
		for i4 := 0; i4 < len(mg.Spec.InitProvider.Actions[i3].Actions); i4++ {
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Actions[i3].Actions[i4].FunctionID),
				Extract:      reference.ExternalName(),
				Reference:    mg.Spec.InitProvider.Actions[i3].Actions[i4].FunctionIDRef,
				Selector:     mg.Spec.InitProvider.Actions[i3].Actions[i4].FunctionIDSelector,
				To: reference.To{
					List:    &v1alpha1.FunctionList{},
					Managed: &v1alpha1.Function{},
				},
			})
			if err != nil {
				return errors.Wrap(err, "mg.Spec.InitProvider.Actions[i3].Actions[i4].FunctionID")
			}
			mg.Spec.InitProvider.Actions[i3].Actions[i4].FunctionID = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.InitProvider.Actions[i3].Actions[i4].FunctionIDRef = rsp.ResolvedReference

		}
	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.Actions); i3++ {
		for i4 := 0; i4 < len(mg.Spec.InitProvider.Actions[i3].Actions); i4++ {
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Actions[i3].Actions[i4].StreamID),
				Extract:      reference.ExternalName(),
				Reference:    mg.Spec.InitProvider.Actions[i3].Actions[i4].StreamIDRef,
				Selector:     mg.Spec.InitProvider.Actions[i3].Actions[i4].StreamIDSelector,
				To: reference.To{
					List:    &v1alpha11.StreamList{},
					Managed: &v1alpha11.Stream{},
				},
			})
			if err != nil {
				return errors.Wrap(err, "mg.Spec.InitProvider.Actions[i3].Actions[i4].StreamID")
			}
			mg.Spec.InitProvider.Actions[i3].Actions[i4].StreamID = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.InitProvider.Actions[i3].Actions[i4].StreamIDRef = rsp.ResolvedReference

		}
	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.Actions); i3++ {
		for i4 := 0; i4 < len(mg.Spec.InitProvider.Actions[i3].Actions); i4++ {
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Actions[i3].Actions[i4].TopicID),
				Extract:      reference.ExternalName(),
				Reference:    mg.Spec.InitProvider.Actions[i3].Actions[i4].TopicIDRef,
				Selector:     mg.Spec.InitProvider.Actions[i3].Actions[i4].TopicIDSelector,
				To: reference.To{
					List:    &v1alpha12.NotificationTopicList{},
					Managed: &v1alpha12.NotificationTopic{},
				},
			})
			if err != nil {
				return errors.Wrap(err, "mg.Spec.InitProvider.Actions[i3].Actions[i4].TopicID")
			}
			mg.Spec.InitProvider.Actions[i3].Actions[i4].TopicID = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.InitProvider.Actions[i3].Actions[i4].TopicIDRef = rsp.ResolvedReference

		}
	}
	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.CompartmentID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.InitProvider.CompartmentIDRef,
		Selector:     mg.Spec.InitProvider.CompartmentIDSelector,
		To: reference.To{
			List:    &v1alpha13.CompartmentList{},
			Managed: &v1alpha13.Compartment{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.CompartmentID")
	}
	mg.Spec.InitProvider.CompartmentID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.CompartmentIDRef = rsp.ResolvedReference

	return nil
}
