/*
Copyright 2022 Upbound Inc.
*/
// Code generated by angryjet. DO NOT EDIT.

package v1alpha1

import (
	"context"
	reference "github.com/crossplane/crossplane-runtime/pkg/reference"
	v1alpha1 "github.com/oracle/provider-oci/apis/identity/v1alpha1"
	errors "github.com/pkg/errors"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

// ResolveReferences of this Log.
func (mg *Log) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.LogGroupID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.LogGroupIDRef,
		Selector:     mg.Spec.ForProvider.LogGroupIDSelector,
		To: reference.To{
			List:    &LogGroupList{},
			Managed: &LogGroup{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.LogGroupID")
	}
	mg.Spec.ForProvider.LogGroupID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.LogGroupIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.LogGroupID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.InitProvider.LogGroupIDRef,
		Selector:     mg.Spec.InitProvider.LogGroupIDSelector,
		To: reference.To{
			List:    &LogGroupList{},
			Managed: &LogGroup{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.LogGroupID")
	}
	mg.Spec.InitProvider.LogGroupID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.LogGroupIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this LogGroup.
func (mg *LogGroup) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.CompartmentID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.CompartmentIDRef,
		Selector:     mg.Spec.ForProvider.CompartmentIDSelector,
		To: reference.To{
			List:    &v1alpha1.CompartmentList{},
			Managed: &v1alpha1.Compartment{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.CompartmentID")
	}
	mg.Spec.ForProvider.CompartmentID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.CompartmentIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.CompartmentID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.InitProvider.CompartmentIDRef,
		Selector:     mg.Spec.InitProvider.CompartmentIDSelector,
		To: reference.To{
			List:    &v1alpha1.CompartmentList{},
			Managed: &v1alpha1.Compartment{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.CompartmentID")
	}
	mg.Spec.InitProvider.CompartmentID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.CompartmentIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this LogSavedSearch.
func (mg *LogSavedSearch) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.CompartmentID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.CompartmentIDRef,
		Selector:     mg.Spec.ForProvider.CompartmentIDSelector,
		To: reference.To{
			List:    &v1alpha1.CompartmentList{},
			Managed: &v1alpha1.Compartment{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.CompartmentID")
	}
	mg.Spec.ForProvider.CompartmentID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.CompartmentIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.CompartmentID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.InitProvider.CompartmentIDRef,
		Selector:     mg.Spec.InitProvider.CompartmentIDSelector,
		To: reference.To{
			List:    &v1alpha1.CompartmentList{},
			Managed: &v1alpha1.Compartment{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.CompartmentID")
	}
	mg.Spec.InitProvider.CompartmentID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.CompartmentIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this UnifiedAgentConfiguration.
func (mg *UnifiedAgentConfiguration) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.CompartmentID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.CompartmentIDRef,
		Selector:     mg.Spec.ForProvider.CompartmentIDSelector,
		To: reference.To{
			List:    &v1alpha1.CompartmentList{},
			Managed: &v1alpha1.Compartment{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.CompartmentID")
	}
	mg.Spec.ForProvider.CompartmentID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.CompartmentIDRef = rsp.ResolvedReference

	for i3 := 0; i3 < len(mg.Spec.ForProvider.ServiceConfiguration); i3++ {
		for i4 := 0; i4 < len(mg.Spec.ForProvider.ServiceConfiguration[i3].Destination); i4++ {
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ServiceConfiguration[i3].Destination[i4].LogObjectID),
				Extract:      reference.ExternalName(),
				Reference:    mg.Spec.ForProvider.ServiceConfiguration[i3].Destination[i4].LogObjectIDRef,
				Selector:     mg.Spec.ForProvider.ServiceConfiguration[i3].Destination[i4].LogObjectIDSelector,
				To: reference.To{
					List:    &LogList{},
					Managed: &Log{},
				},
			})
			if err != nil {
				return errors.Wrap(err, "mg.Spec.ForProvider.ServiceConfiguration[i3].Destination[i4].LogObjectID")
			}
			mg.Spec.ForProvider.ServiceConfiguration[i3].Destination[i4].LogObjectID = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.ForProvider.ServiceConfiguration[i3].Destination[i4].LogObjectIDRef = rsp.ResolvedReference

		}
	}
	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.CompartmentID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.InitProvider.CompartmentIDRef,
		Selector:     mg.Spec.InitProvider.CompartmentIDSelector,
		To: reference.To{
			List:    &v1alpha1.CompartmentList{},
			Managed: &v1alpha1.Compartment{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.CompartmentID")
	}
	mg.Spec.InitProvider.CompartmentID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.CompartmentIDRef = rsp.ResolvedReference

	for i3 := 0; i3 < len(mg.Spec.InitProvider.ServiceConfiguration); i3++ {
		for i4 := 0; i4 < len(mg.Spec.InitProvider.ServiceConfiguration[i3].Destination); i4++ {
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.ServiceConfiguration[i3].Destination[i4].LogObjectID),
				Extract:      reference.ExternalName(),
				Reference:    mg.Spec.InitProvider.ServiceConfiguration[i3].Destination[i4].LogObjectIDRef,
				Selector:     mg.Spec.InitProvider.ServiceConfiguration[i3].Destination[i4].LogObjectIDSelector,
				To: reference.To{
					List:    &LogList{},
					Managed: &Log{},
				},
			})
			if err != nil {
				return errors.Wrap(err, "mg.Spec.InitProvider.ServiceConfiguration[i3].Destination[i4].LogObjectID")
			}
			mg.Spec.InitProvider.ServiceConfiguration[i3].Destination[i4].LogObjectID = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.InitProvider.ServiceConfiguration[i3].Destination[i4].LogObjectIDRef = rsp.ResolvedReference

		}
	}

	return nil
}
