/*
Copyright 2022 Upbound Inc.
*/
// Code generated by angryjet. DO NOT EDIT.

package v1alpha1

import (
	"context"
	reference "github.com/crossplane/crossplane-runtime/pkg/reference"
	v1alpha1 "github.com/oracle/provider-oci/apis/identity/v1alpha1"
	errors "github.com/pkg/errors"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

// ResolveReferences of this AccessPolicy.
func (mg *AccessPolicy) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.CompartmentID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.CompartmentIDRef,
		Selector:     mg.Spec.ForProvider.CompartmentIDSelector,
		To: reference.To{
			List:    &v1alpha1.CompartmentList{},
			Managed: &v1alpha1.Compartment{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.CompartmentID")
	}
	mg.Spec.ForProvider.CompartmentID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.CompartmentIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.MeshID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.MeshIDRef,
		Selector:     mg.Spec.ForProvider.MeshIDSelector,
		To: reference.To{
			List:    &MeshList{},
			Managed: &Mesh{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.MeshID")
	}
	mg.Spec.ForProvider.MeshID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.MeshIDRef = rsp.ResolvedReference

	for i3 := 0; i3 < len(mg.Spec.ForProvider.Rules); i3++ {
		for i4 := 0; i4 < len(mg.Spec.ForProvider.Rules[i3].Destination); i4++ {
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Rules[i3].Destination[i4].IngressGatewayID),
				Extract:      reference.ExternalName(),
				Reference:    mg.Spec.ForProvider.Rules[i3].Destination[i4].IngressGatewayIDRef,
				Selector:     mg.Spec.ForProvider.Rules[i3].Destination[i4].IngressGatewayIDSelector,
				To: reference.To{
					List:    &IngressGatewayList{},
					Managed: &IngressGateway{},
				},
			})
			if err != nil {
				return errors.Wrap(err, "mg.Spec.ForProvider.Rules[i3].Destination[i4].IngressGatewayID")
			}
			mg.Spec.ForProvider.Rules[i3].Destination[i4].IngressGatewayID = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.ForProvider.Rules[i3].Destination[i4].IngressGatewayIDRef = rsp.ResolvedReference

		}
	}
	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.CompartmentID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.InitProvider.CompartmentIDRef,
		Selector:     mg.Spec.InitProvider.CompartmentIDSelector,
		To: reference.To{
			List:    &v1alpha1.CompartmentList{},
			Managed: &v1alpha1.Compartment{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.CompartmentID")
	}
	mg.Spec.InitProvider.CompartmentID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.CompartmentIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.MeshID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.InitProvider.MeshIDRef,
		Selector:     mg.Spec.InitProvider.MeshIDSelector,
		To: reference.To{
			List:    &MeshList{},
			Managed: &Mesh{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.MeshID")
	}
	mg.Spec.InitProvider.MeshID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.MeshIDRef = rsp.ResolvedReference

	for i3 := 0; i3 < len(mg.Spec.InitProvider.Rules); i3++ {
		for i4 := 0; i4 < len(mg.Spec.InitProvider.Rules[i3].Destination); i4++ {
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Rules[i3].Destination[i4].IngressGatewayID),
				Extract:      reference.ExternalName(),
				Reference:    mg.Spec.InitProvider.Rules[i3].Destination[i4].IngressGatewayIDRef,
				Selector:     mg.Spec.InitProvider.Rules[i3].Destination[i4].IngressGatewayIDSelector,
				To: reference.To{
					List:    &IngressGatewayList{},
					Managed: &IngressGateway{},
				},
			})
			if err != nil {
				return errors.Wrap(err, "mg.Spec.InitProvider.Rules[i3].Destination[i4].IngressGatewayID")
			}
			mg.Spec.InitProvider.Rules[i3].Destination[i4].IngressGatewayID = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.InitProvider.Rules[i3].Destination[i4].IngressGatewayIDRef = rsp.ResolvedReference

		}
	}

	return nil
}

// ResolveReferences of this IngressGateway.
func (mg *IngressGateway) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.CompartmentID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.CompartmentIDRef,
		Selector:     mg.Spec.ForProvider.CompartmentIDSelector,
		To: reference.To{
			List:    &v1alpha1.CompartmentList{},
			Managed: &v1alpha1.Compartment{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.CompartmentID")
	}
	mg.Spec.ForProvider.CompartmentID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.CompartmentIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.MeshID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.MeshIDRef,
		Selector:     mg.Spec.ForProvider.MeshIDSelector,
		To: reference.To{
			List:    &MeshList{},
			Managed: &Mesh{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.MeshID")
	}
	mg.Spec.ForProvider.MeshID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.MeshIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.CompartmentID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.InitProvider.CompartmentIDRef,
		Selector:     mg.Spec.InitProvider.CompartmentIDSelector,
		To: reference.To{
			List:    &v1alpha1.CompartmentList{},
			Managed: &v1alpha1.Compartment{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.CompartmentID")
	}
	mg.Spec.InitProvider.CompartmentID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.CompartmentIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.MeshID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.InitProvider.MeshIDRef,
		Selector:     mg.Spec.InitProvider.MeshIDSelector,
		To: reference.To{
			List:    &MeshList{},
			Managed: &Mesh{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.MeshID")
	}
	mg.Spec.InitProvider.MeshID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.MeshIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this IngressGatewayRouteTable.
func (mg *IngressGatewayRouteTable) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.CompartmentID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.CompartmentIDRef,
		Selector:     mg.Spec.ForProvider.CompartmentIDSelector,
		To: reference.To{
			List:    &v1alpha1.CompartmentList{},
			Managed: &v1alpha1.Compartment{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.CompartmentID")
	}
	mg.Spec.ForProvider.CompartmentID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.CompartmentIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.IngressGatewayID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.IngressGatewayIDRef,
		Selector:     mg.Spec.ForProvider.IngressGatewayIDSelector,
		To: reference.To{
			List:    &IngressGatewayList{},
			Managed: &IngressGateway{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.IngressGatewayID")
	}
	mg.Spec.ForProvider.IngressGatewayID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.IngressGatewayIDRef = rsp.ResolvedReference

	for i3 := 0; i3 < len(mg.Spec.ForProvider.RouteRules); i3++ {
		for i4 := 0; i4 < len(mg.Spec.ForProvider.RouteRules[i3].Destinations); i4++ {
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.RouteRules[i3].Destinations[i4].VirtualServiceID),
				Extract:      reference.ExternalName(),
				Reference:    mg.Spec.ForProvider.RouteRules[i3].Destinations[i4].VirtualServiceIDRef,
				Selector:     mg.Spec.ForProvider.RouteRules[i3].Destinations[i4].VirtualServiceIDSelector,
				To: reference.To{
					List:    &VirtualServiceList{},
					Managed: &VirtualService{},
				},
			})
			if err != nil {
				return errors.Wrap(err, "mg.Spec.ForProvider.RouteRules[i3].Destinations[i4].VirtualServiceID")
			}
			mg.Spec.ForProvider.RouteRules[i3].Destinations[i4].VirtualServiceID = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.ForProvider.RouteRules[i3].Destinations[i4].VirtualServiceIDRef = rsp.ResolvedReference

		}
	}
	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.CompartmentID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.InitProvider.CompartmentIDRef,
		Selector:     mg.Spec.InitProvider.CompartmentIDSelector,
		To: reference.To{
			List:    &v1alpha1.CompartmentList{},
			Managed: &v1alpha1.Compartment{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.CompartmentID")
	}
	mg.Spec.InitProvider.CompartmentID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.CompartmentIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.IngressGatewayID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.InitProvider.IngressGatewayIDRef,
		Selector:     mg.Spec.InitProvider.IngressGatewayIDSelector,
		To: reference.To{
			List:    &IngressGatewayList{},
			Managed: &IngressGateway{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.IngressGatewayID")
	}
	mg.Spec.InitProvider.IngressGatewayID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.IngressGatewayIDRef = rsp.ResolvedReference

	for i3 := 0; i3 < len(mg.Spec.InitProvider.RouteRules); i3++ {
		for i4 := 0; i4 < len(mg.Spec.InitProvider.RouteRules[i3].Destinations); i4++ {
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.RouteRules[i3].Destinations[i4].VirtualServiceID),
				Extract:      reference.ExternalName(),
				Reference:    mg.Spec.InitProvider.RouteRules[i3].Destinations[i4].VirtualServiceIDRef,
				Selector:     mg.Spec.InitProvider.RouteRules[i3].Destinations[i4].VirtualServiceIDSelector,
				To: reference.To{
					List:    &VirtualServiceList{},
					Managed: &VirtualService{},
				},
			})
			if err != nil {
				return errors.Wrap(err, "mg.Spec.InitProvider.RouteRules[i3].Destinations[i4].VirtualServiceID")
			}
			mg.Spec.InitProvider.RouteRules[i3].Destinations[i4].VirtualServiceID = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.InitProvider.RouteRules[i3].Destinations[i4].VirtualServiceIDRef = rsp.ResolvedReference

		}
	}

	return nil
}

// ResolveReferences of this Mesh.
func (mg *Mesh) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.CompartmentID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.CompartmentIDRef,
		Selector:     mg.Spec.ForProvider.CompartmentIDSelector,
		To: reference.To{
			List:    &v1alpha1.CompartmentList{},
			Managed: &v1alpha1.Compartment{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.CompartmentID")
	}
	mg.Spec.ForProvider.CompartmentID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.CompartmentIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.CompartmentID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.InitProvider.CompartmentIDRef,
		Selector:     mg.Spec.InitProvider.CompartmentIDSelector,
		To: reference.To{
			List:    &v1alpha1.CompartmentList{},
			Managed: &v1alpha1.Compartment{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.CompartmentID")
	}
	mg.Spec.InitProvider.CompartmentID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.CompartmentIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this VirtualDeployment.
func (mg *VirtualDeployment) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.CompartmentID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.CompartmentIDRef,
		Selector:     mg.Spec.ForProvider.CompartmentIDSelector,
		To: reference.To{
			List:    &v1alpha1.CompartmentList{},
			Managed: &v1alpha1.Compartment{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.CompartmentID")
	}
	mg.Spec.ForProvider.CompartmentID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.CompartmentIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.VirtualServiceID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.VirtualServiceIDRef,
		Selector:     mg.Spec.ForProvider.VirtualServiceIDSelector,
		To: reference.To{
			List:    &VirtualServiceList{},
			Managed: &VirtualService{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.VirtualServiceID")
	}
	mg.Spec.ForProvider.VirtualServiceID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.VirtualServiceIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.CompartmentID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.InitProvider.CompartmentIDRef,
		Selector:     mg.Spec.InitProvider.CompartmentIDSelector,
		To: reference.To{
			List:    &v1alpha1.CompartmentList{},
			Managed: &v1alpha1.Compartment{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.CompartmentID")
	}
	mg.Spec.InitProvider.CompartmentID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.CompartmentIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.VirtualServiceID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.InitProvider.VirtualServiceIDRef,
		Selector:     mg.Spec.InitProvider.VirtualServiceIDSelector,
		To: reference.To{
			List:    &VirtualServiceList{},
			Managed: &VirtualService{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.VirtualServiceID")
	}
	mg.Spec.InitProvider.VirtualServiceID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.VirtualServiceIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this VirtualService.
func (mg *VirtualService) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.CompartmentID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.CompartmentIDRef,
		Selector:     mg.Spec.ForProvider.CompartmentIDSelector,
		To: reference.To{
			List:    &v1alpha1.CompartmentList{},
			Managed: &v1alpha1.Compartment{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.CompartmentID")
	}
	mg.Spec.ForProvider.CompartmentID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.CompartmentIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.MeshID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.MeshIDRef,
		Selector:     mg.Spec.ForProvider.MeshIDSelector,
		To: reference.To{
			List:    &MeshList{},
			Managed: &Mesh{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.MeshID")
	}
	mg.Spec.ForProvider.MeshID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.MeshIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.CompartmentID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.InitProvider.CompartmentIDRef,
		Selector:     mg.Spec.InitProvider.CompartmentIDSelector,
		To: reference.To{
			List:    &v1alpha1.CompartmentList{},
			Managed: &v1alpha1.Compartment{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.CompartmentID")
	}
	mg.Spec.InitProvider.CompartmentID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.CompartmentIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.MeshID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.InitProvider.MeshIDRef,
		Selector:     mg.Spec.InitProvider.MeshIDSelector,
		To: reference.To{
			List:    &MeshList{},
			Managed: &Mesh{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.MeshID")
	}
	mg.Spec.InitProvider.MeshID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.MeshIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this VirtualServiceRouteTable.
func (mg *VirtualServiceRouteTable) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.CompartmentID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.CompartmentIDRef,
		Selector:     mg.Spec.ForProvider.CompartmentIDSelector,
		To: reference.To{
			List:    &v1alpha1.CompartmentList{},
			Managed: &v1alpha1.Compartment{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.CompartmentID")
	}
	mg.Spec.ForProvider.CompartmentID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.CompartmentIDRef = rsp.ResolvedReference

	for i3 := 0; i3 < len(mg.Spec.ForProvider.RouteRules); i3++ {
		for i4 := 0; i4 < len(mg.Spec.ForProvider.RouteRules[i3].Destinations); i4++ {
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.RouteRules[i3].Destinations[i4].VirtualDeploymentID),
				Extract:      reference.ExternalName(),
				Reference:    mg.Spec.ForProvider.RouteRules[i3].Destinations[i4].VirtualDeploymentIDRef,
				Selector:     mg.Spec.ForProvider.RouteRules[i3].Destinations[i4].VirtualDeploymentIDSelector,
				To: reference.To{
					List:    &VirtualDeploymentList{},
					Managed: &VirtualDeployment{},
				},
			})
			if err != nil {
				return errors.Wrap(err, "mg.Spec.ForProvider.RouteRules[i3].Destinations[i4].VirtualDeploymentID")
			}
			mg.Spec.ForProvider.RouteRules[i3].Destinations[i4].VirtualDeploymentID = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.ForProvider.RouteRules[i3].Destinations[i4].VirtualDeploymentIDRef = rsp.ResolvedReference

		}
	}
	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.VirtualServiceID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.VirtualServiceIDRef,
		Selector:     mg.Spec.ForProvider.VirtualServiceIDSelector,
		To: reference.To{
			List:    &VirtualServiceList{},
			Managed: &VirtualService{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.VirtualServiceID")
	}
	mg.Spec.ForProvider.VirtualServiceID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.VirtualServiceIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.CompartmentID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.InitProvider.CompartmentIDRef,
		Selector:     mg.Spec.InitProvider.CompartmentIDSelector,
		To: reference.To{
			List:    &v1alpha1.CompartmentList{},
			Managed: &v1alpha1.Compartment{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.CompartmentID")
	}
	mg.Spec.InitProvider.CompartmentID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.CompartmentIDRef = rsp.ResolvedReference

	for i3 := 0; i3 < len(mg.Spec.InitProvider.RouteRules); i3++ {
		for i4 := 0; i4 < len(mg.Spec.InitProvider.RouteRules[i3].Destinations); i4++ {
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.RouteRules[i3].Destinations[i4].VirtualDeploymentID),
				Extract:      reference.ExternalName(),
				Reference:    mg.Spec.InitProvider.RouteRules[i3].Destinations[i4].VirtualDeploymentIDRef,
				Selector:     mg.Spec.InitProvider.RouteRules[i3].Destinations[i4].VirtualDeploymentIDSelector,
				To: reference.To{
					List:    &VirtualDeploymentList{},
					Managed: &VirtualDeployment{},
				},
			})
			if err != nil {
				return errors.Wrap(err, "mg.Spec.InitProvider.RouteRules[i3].Destinations[i4].VirtualDeploymentID")
			}
			mg.Spec.InitProvider.RouteRules[i3].Destinations[i4].VirtualDeploymentID = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.InitProvider.RouteRules[i3].Destinations[i4].VirtualDeploymentIDRef = rsp.ResolvedReference

		}
	}
	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.VirtualServiceID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.InitProvider.VirtualServiceIDRef,
		Selector:     mg.Spec.InitProvider.VirtualServiceIDSelector,
		To: reference.To{
			List:    &VirtualServiceList{},
			Managed: &VirtualService{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.VirtualServiceID")
	}
	mg.Spec.InitProvider.VirtualServiceID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.VirtualServiceIDRef = rsp.ResolvedReference

	return nil
}
